<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>문과생 코딩 개척기</title>
  
  <subtitle>풀스택 개발자가 되는 날까지</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caesiumy.github.io/"/>
  <updated>2019-05-02T15:23:22.455Z</updated>
  <id>https://caesiumy.github.io/</id>
  
  <author>
    <name>Caesiumy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>19년도 상반기 구글 스터디 잼 &lt;머신러닝&gt; 후기</title>
    <link href="https://caesiumy.github.io/2019/05/02/study-jam-review-19/"/>
    <id>https://caesiumy.github.io/2019/05/02/study-jam-review-19/</id>
    <published>2019-05-02T13:47:39.000Z</published>
    <updated>2019-05-02T15:23:22.455Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;올해 2월 입문반부터 시작한 구글 스터디 잼 머신러닝 편! 중급반 후기를 들려드립니다!&lt;/p&gt;
    
    </summary>
    
      <category term="머신러닝" scheme="https://caesiumy.github.io/categories/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/"/>
    
      <category term="스터디잼" scheme="https://caesiumy.github.io/categories/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/%EC%8A%A4%ED%84%B0%EB%94%94%EC%9E%BC/"/>
    
    
      <category term="머신러닝" scheme="https://caesiumy.github.io/tags/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/"/>
    
      <category term="구글" scheme="https://caesiumy.github.io/tags/%EA%B5%AC%EA%B8%80/"/>
    
      <category term="스터디잼" scheme="https://caesiumy.github.io/tags/%EC%8A%A4%ED%84%B0%EB%94%94%EC%9E%BC/"/>
    
  </entry>
  
  <entry>
    <title>간단하게 알아보는 프론트엔드와 백엔드의 특징</title>
    <link href="https://caesiumy.github.io/2019/04/14/frontend-and-backend-features/"/>
    <id>https://caesiumy.github.io/2019/04/14/frontend-and-backend-features/</id>
    <published>2019-04-14T14:50:25.000Z</published>
    <updated>2019-05-01T14:59:15.921Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h1 id="프론트-Front-백-Back"><a href="#프론트-Front-백-Back" class="headerlink" title="프론트(Front)? 백(Back)?"></a>프론트(Front)? 백(Back)?</h1><div class="figure center" style="width:;"><a class="fancybox" href="fullstack.jpg" title data-caption data-fancybox="default"><img class="fig-img" src="fullstack.jpg" alt></a></div><blockquote><p>Front / Back</p></blockquote><p>앞과 뒤를 뜻하는 의미라는 것은 모두가 알고 있을 상식이다. 그리고 그 말대로, 프로그래밍에서도 프론트와 백을 <strong>앞단과 뒷단</strong>이라고 하기도 한다.</p><p>구체적으로 말하자면,</p><ul><li><strong>프론트엔드</strong>는 프로그램의 앞, 즉 모습을 프로그래밍하는 것이고,</li><li><strong>백엔드</strong>는 프로그램의 뒤, 다시 말해 알고리즘 같은 것들을 프로그래밍하는 것이다.</li></ul><p>이제 아래에서 프론트엔드와 백엔드의 장단점을 간단히 알아보자!</p><hr><h1 id="프론트엔드"><a href="#프론트엔드" class="headerlink" title="프론트엔드"></a>프론트엔드</h1><p>웹개발의 측면에서 말하자면, 누구나 처음은 프론트엔드로 시작했을 것이다.<br>간단한 <code>html</code>, <code>css</code>, <code>js</code> 정도는 입문자들의 빼놓을 수 없는 필수코스!</p><p>그럼 프론트엔드가 무엇인지 간단히 말하자면…<br><a href="https://www.naver.com/" rel="external nofollow noopener noreferrer" target="_blank">네이버</a>를 예시로 들어보자.</p><div class="alert success no-icon"><ul><li>맨 위의 네이버 로고는 <strong>무슨 모양</strong>으로 할지</li><li>검색창은 <strong>어디에</strong> 둘지</li><li>로그인은 <strong>모달</strong>을 띄울지 말지</li><li>더보기 버튼을 누르면 <strong>어떤 액션</strong>을 취할지</li><li>뉴스 링크를 누르면 <strong>어떤 페이지로 이동</strong>할지</li><li>실시간 검색어로 <strong>커서를 옮기면</strong> 자동 확대할지</li></ul></div><p>등등 유저가 접근하는 곳에서의 일을 담당한다고 생각하면 된다.<br>쉽게 말해 입문자가 생각하는 웹개발은 그냥 프론트엔드의 일이다.</p><p>이쯤에서 프론트엔드의 장단점을 살펴보자</p><h2 id="프론트엔드의-장점"><a href="#프론트엔드의-장점" class="headerlink" title="프론트엔드의 장점"></a>프론트엔드의 장점</h2><div class="alert info no-icon"><ol><li>시각적 피드백을 바로바로 받을 수 있다.</li><li>유저와의 연결성이 높다.</li><li>뭔가 만들어낸다는 느낌을 강하게 받을 수 있다.</li></ol></div><p><br></p><h3 id="1-시각적-피드백을-바로-받을-수-있다"><a href="#1-시각적-피드백을-바로-받을-수-있다" class="headerlink" title="1. 시각적 피드백을 바로 받을 수 있다."></a>1. 시각적 피드백을 바로 받을 수 있다.</h3><p>사실상 프론트엔드의 <strong>최대 강점이자, 그 자체</strong>이다.<br>내가 만들어낸 것을 바로 볼 수가 있는 것.<br>그것만으로도 프로그래머에게 큰 동기부여가 된다는 것은 백엔드를 개발해보면 알 것이다…</p><h3 id="2-유저와의-연결성이-높다"><a href="#2-유저와의-연결성이-높다" class="headerlink" title="2. 유저와의 연결성이 높다."></a>2. 유저와의 연결성이 높다.</h3><p><strong>시각적 피드백</strong>을 받는다는 것은 자기 자신으로부터뿐만 아니라, <strong>유저에게서도 받는다</strong>는 것을 의미한다. <del>좋은 의미로든 나쁜 의미로든</del></p><p>그렇기에 개발하고 나서도</p><blockquote><p>야! 내가 만든 사이트 좀 봐봐!</p></blockquote><p>라고 자랑할 수 있는 <strong>자랑거리</strong>가 생기는 셈이기도 하다.</p><h3 id="3-만들어낸다는-느낌을-받는다"><a href="#3-만들어낸다는-느낌을-받는다" class="headerlink" title="3. 만들어낸다는 느낌을 받는다."></a>3. 만들어낸다는 느낌을 받는다.</h3><p>역시나 <strong>시각적</strong>이라는 단어를 빼놓을 수가 없다.<br>멋스럽게 만들고, 친구들에게 자랑한다는 생각만으로도 개발자는 열정의 불꽃을 피우게 될 것이다.</p><p><br></p><h2 id="프론트엔드의-단점"><a href="#프론트엔드의-단점" class="headerlink" title="프론트엔드의 단점"></a>프론트엔드의 단점</h2><p>위와 같은 시각적인 장점에도 불구하고, 단점또한 뚜렷하다.</p><div class="alert info no-icon"><ol><li>선택의 폭이 좁다.</li><li>피로도가 높다.</li><li>업데이트가 빠르다.</li><li>개발자로부터 인정을 받기 힘들다.</li></ol></div><h3 id="1-선택의-폭이-좁다"><a href="#1-선택의-폭이-좁다" class="headerlink" title="1. 선택의 폭이 좁다."></a>1. 선택의 폭이 좁다.</h3><p>프론트엔드 개발자에게는 숙명이 있다.<br>그것은 바로 <code>html</code>, <code>css</code>, <code>js</code>.<br>세 가지 중 단 하나라도 꺼려진다면 프론트엔드는 <strong>아웃</strong>…</p><p></p><p></p><br><div class="figure center" style="width:;"><a class="fancybox" href="css.gif" title="css란 이런 것" data-caption="css란 이런 것" data-fancybox="default"><img class="fig-img" src="css.gif" alt="css란 이런 것"></a><span class="caption">css란 이런 것</span></div><p></p><h3 id="2-피로도가-높다"><a href="#2-피로도가-높다" class="headerlink" title="2. 피로도가 높다."></a>2. 피로도가 높다.</h3><p>물론 모든 개발자는 피로도가 맥스치를 가볍게 넘는 것은 자명한 사실이지만<br>프론트엔드는 <strong>그 중 조금 더</strong> 라고 생각하면 된다.</p><p>개발과 디자인이 결합된 부분도 있고,<br>백엔드에 비해 배워야 할 지식들이 많다.</p><blockquote><p>html css js로 끝이라고 생각하면 오산!<br>ajax부터 bootstrap, npm, webpack 등등…<br>필수 아닌 필수는 많다.</p></blockquote><h3 id="3-업데이트가-빠르다"><a href="#3-업데이트가-빠르다" class="headerlink" title="3. 업데이트가 빠르다."></a>3. 업데이트가 빠르다.</h3><blockquote><p>빠르면 좋지 않아??</p></blockquote><p>는 유저 입장의 생각.<br><strong>프로그래머는 공부할 것이 늘어난다</strong>고 생각해야한다.</p><p>따라서 위에서 언급한 많은 양의 필요한 프로그래밍툴 <strong>모두 업데이트를 따라가야 한다.</strong><br>업데이트가 느리면 괜찮을 수도 있겠지만, 프론트엔드 시장은 그리 호락호락하지 않다.<br>매일매일 뒤바뀌는 놀이터이기 때문에, <strong>끊임없이</strong> 공부를 해야한다.<br><del>마치 비트코인 같달까</del></p><p></p><p></p><br><div class="figure center" style="width:;"><a class="fancybox" href="js2.jpg" title="js는 물 속에서 코딩해야 한다. 그래야 아무도 우는 것을 보지 못할테니..." data-caption="js는 물 속에서 코딩해야 한다. 그래야 아무도 우는 것을 보지 못할테니..." data-fancybox="default"><img class="fig-img" src="js2.jpg" alt="js는 물 속에서 코딩해야 한다. 그래야 아무도 우는 것을 보지 못할테니..."></a><span class="caption">js는 물 속에서 코딩해야 한다. 그래야 아무도 우는 것을 보지 못할테니...</span></div><p></p><h3 id="4-개발자로부터-인정을-받지-못한다"><a href="#4-개발자로부터-인정을-받지-못한다" class="headerlink" title="4. 개발자로부터 인정을 받지 못한다."></a>4. 개발자로부터 인정을 받지 못한다.</h3><p>이거는 좀 케바케이긴 하지만, 사실 좋은 프론트엔드 개발자가 <strong>부족</strong>해서 나타나는 현상이기도 하다.</p><p>전공을 배운 개발자들은 대체로 백엔드를 담당하므로,<br>프론트엔드는 비전공자, 디자이너 출신 개발자나 하는 영역이라고 생각하기 일쑤이다.</p><p>이 글을 보고 계시는 여러분도 십중팔구 맨 위에서 <code>시각적이다, 앞모습을 만든다</code> 이런 소리를 듣고선 프론트엔드가 <strong>쉬워보이니</strong> 하고 싶다고 생각한 사람이 있을 것이다. <strong>분명.</strong></p><p></p><p></p><br><div class="figure center" style="width:;"><a class="fancybox" href="html.jpg" title="항목과 별개로 이건 맞는 말이다." data-caption="항목과 별개로 이건 맞는 말이다." data-fancybox="default"><img class="fig-img" src="html.jpg" alt="항목과 별개로 이건 맞는 말이다."></a><span class="caption">항목과 별개로 이건 맞는 말이다.</span></div><p></p><hr><h1 id="백엔드"><a href="#백엔드" class="headerlink" title="백엔드"></a>백엔드</h1><p><strong>전공자들</strong>은 웹개발 전에 데이터베이스를 위한 SQL, 알고리즘 공부를 위한 각자의 언어쯤은 하나씩 특기로 가지고 있을 것이다.<br>지금까지는 콘솔에서 인풋 아웃풋을 넣었겠지만, 이제는 그 <strong>결과를 웹으로 방출할 시간</strong>이다!</p><p>프론트엔드가 웹의 앞모습이라면, 백엔드는 <strong>뒤에서 묵묵히 일하는</strong> <del>다크나이트</del> 이다.<br>앞서 말한 프론트가 화장한 얼굴이라면, 백은 안면 골격 정도…?? (맞는 표현인가 이거)<br>위에서처럼 예시로 다뤄보자면</p><div class="alert success no-icon"><ul><li>어떻게 하면 검색 <strong>속도를 향상</strong>시킬지</li><li>목록 <strong>정렬</strong> 기준은 어떻게 할지</li><li>이미지 데이터들은 <strong>어디서</strong> 불러올지</li><li>사이트의 <strong>보안</strong>은 어떻게 구축할지</li><li>모바일 <strong>데이터</strong>는 어떻게 절약할지</li></ul></div><p>등등 <strong>유저라면 전혀 생각하지 않는 요소들</strong>을 위해 일한다…</p><h2 id="백엔드의-장점"><a href="#백엔드의-장점" class="headerlink" title="백엔드의 장점"></a>백엔드의 장점</h2><div class="alert info no-icon"><ol><li>대부분이 이미 배운 것이다. (전공자의 경우)</li><li>개발환경이 안정적이다.</li></ol></div><h3 id="1-전공자의-경우-이미-배운-것이다"><a href="#1-전공자의-경우-이미-배운-것이다" class="headerlink" title="1. 전공자의 경우 이미 배운 것이다."></a>1. 전공자의 경우 이미 배운 것이다.</h3><p>물론 공부 환경에 따라 다르겠지만, 그래도 전공자가 유리한 것은 <strong>사실</strong>이다.<br>어느 학교든 데이터베이스랑 언어쯤은 배우지 않는가?</p><p>그거면 된다. 데이터베이스를 맡은 백엔드면 SQL을 잘하면 되는 것이고<br>그외라면 자신이 맡은 언어로 잘 헤쳐나가면 된다.</p><p>예를 들어, 현재 멋사 커리큘럼인 <code>django</code> 같은 경우는 <code>python</code> 기반이기 때문에 전공자라면 웬만해서는 경험해봤을 언어이다. 하다못해 들어보기라도 했을테고, 혹여 알지 못하더라도 다른 언어를 접해본 경험이 있으면 공부 없이 사용할 수 있을 정도로 쉽다.</p><p>따로 자바의 스프링 등 전공자라면 다 해봤음직한 언어들을 활용하는 곳이 백엔드이다.</p><div class="figure center" style="width:;"><a class="fancybox" href="front_vs_back3.jpg" title="프론트도 중요하지만 그걸 떠받치는 백도 중요하다." data-caption="프론트도 중요하지만 그걸 떠받치는 백도 중요하다." data-fancybox="default"><img class="fig-img" src="front_vs_back3.jpg" alt="프론트도 중요하지만 그걸 떠받치는 백도 중요하다."></a><span class="caption">프론트도 중요하지만 그걸 떠받치는 백도 중요하다.</span></div><h3 id="2-개발환경이-안정적이다"><a href="#2-개발환경이-안정적이다" class="headerlink" title="2. 개발환경이 안정적이다."></a>2. 개발환경이 안정적이다.</h3><p>빠르게 발전하는 프론트에 비해 백이 가진 <strong>큰 장점</strong>이다.<br>프론트를 몇 년 쉬었다가 다시 시작한다면?? 꽤 배울 것이 많을 것이다.<br>그러나 백을 몇 년 쉬었다가 다시 시작한다면?? 언어 자체는 크게 변하지 않았기에 공부할 것도 별로 없을 것이다.</p><p>그리고 한 가지 언어를 알고 있으면 다른 언어로 넘어가는 것도 쉽기에, 더욱 안정적이다.</p><p>덧붙여서 프론트엔드도 <a href="https://supernova.io/" rel="external nofollow noopener noreferrer" target="_blank">이런 툴</a>들이 나오면서 입지가 좁아지고 있다…</p><h2 id="백엔드의-단점"><a href="#백엔드의-단점" class="headerlink" title="백엔드의 단점"></a>백엔드의 단점</h2><p>장점이 있으면 단점이 있는 법. 개발환경이 안정적이라서 철밥통으로 느껴지신다구요? <strong>천만의 말씀!</strong></p><div class="alert info no-icon"><ol><li>알고리즘이 필수</li><li>시각적 피드백 전무</li></ol></div><h3 id="1-알고리즘이-필수"><a href="#1-알고리즘이-필수" class="headerlink" title="1. 알고리즘이 필수"></a>1. 알고리즘이 필수</h3><p>컴퓨터공학의 꽃, 알고리즘… <a href="https://youtu.be/kPRA0W1kECg" rel="external nofollow noopener noreferrer" target="_blank">정렬</a>부터 시작해서… 으윽 머리가…!!</p><div class="figure center" style="width:;"><a class="fancybox" href="algorithm.jpg" title="이번에 친구가 보여준 알고리즘 시험 문제" data-caption="이번에 친구가 보여준 알고리즘 시험 문제" data-fancybox="default"><img class="fig-img" src="algorithm.jpg" alt="이번에 친구가 보여준 알고리즘 시험 문제"></a><span class="caption">이번에 친구가 보여준 알고리즘 시험 문제</span></div><p>프론트엔드가 <code>html</code>, <code>css</code>, <code>js</code> 가 필수였다면<br>백엔드는 <strong>알고리즘이 필수</strong>이다.</p><p>그러니 모두들 어서 <a href="https://www.acmicpc.net/" rel="external nofollow noopener noreferrer" target="_blank">백준</a>을 공략하자구!!</p><h3 id="2-시각적-피드백-전무"><a href="#2-시각적-피드백-전무" class="headerlink" title="2. 시각적 피드백 전무"></a>2. 시각적 피드백 전무</h3><p>프론트엔드가 가진 큰 강점인 시각적 피드백은 <strong>동기부여와 직결되는 문제</strong>이다.<br>백엔드에서 아무리 데이터베이스를 잘 짜고, 정렬의 속도를 높여봤자 <strong>유저는 알지 못한다</strong>…</p><p>친구가 와서</p><blockquote><p>네 웹사이트 디자인 멋지던데?</p></blockquote><p>라고는 할 수 있어도</p><blockquote><p>네 웹사이트 데이터베이스 구조 굉장하던데??<br>이야 그렇게 빠른 검색 알고리즘은 처음이야!</p></blockquote><p>라는 피드백을 받는 건… 친구가 개발자여도 힘들 것이다.</p><hr><h1 id="정답은-없다"><a href="#정답은-없다" class="headerlink" title="정답은 없다."></a>정답은 없다.</h1><p>사실 어느 분야나 직업이나 장점이 있고 단점이 있다.<br>또한 그렇기에 모든 선택의 책임은 자기 자신에게 달려있는 것.</p><p>첨언하자면 필자는 현재는 프론트엔드를 지향하지만, 역시 <strong>백엔드도 함께</strong> 공부하여 <strong>풀스택 엔지니어</strong>를 꿈꾸고 있다.<br>프론트라고 해서 <strong>백을 모르면 안 되고</strong>, 백이라고 해서 <strong>프론트를 모르면 안 되는</strong> 세상이기 때문이다.<br>결국 시작이 다른 것뿐이지, 결승선은 같아야 한다는 뜻.</p><blockquote><p>매일 프로그래밍 설문조사</p><ul><li><strong>&lt;프론트엔드도 알고리즘과 자료구조를 알아야 하는가?&gt;</strong> 결과<ul><li><strong><span class="highlight-text primary">네 (82%) </span></strong></li><li>아니오 (18%)</li></ul></li></ul></blockquote><p>다만, 내가 피피티 좀 잘 만든다, 1픽셀이라도 어긋난 것은 참을 수 없다 이런 생각을 가지고 있으면 먼저 프론트엔드로 오기 바란다. 왜냐하면 내가 그랬으니까!</p><p>언제나 그렇지만 피드백 환영합니다!!</p><hr><h2 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h2><ul><li><a href="https://youtu.be/oOd0IKWwg1E" rel="external nofollow noopener noreferrer" target="_blank">노마드 코더의 프론트엔드 vs 백엔드</a></li><li><a href="https://medium.com/@Jbee_/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EB%A0%A4%EB%A9%B4-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%B4%EC%95%BC-%ED%95%98%EB%82%98%EC%9A%94-1dd59a14e084" rel="external nofollow noopener noreferrer" target="_blank">신입 프론트엔드는 무엇을 공부해야 하나요</a></li><li><a href="https://github.com/kesuskim/Front-End-Checklist" rel="external nofollow noopener noreferrer" target="_blank">프론트엔드 체크리스트</a></li><li><a href="https://www.acmicpc.net/" rel="external nofollow noopener noreferrer" target="_blank">백준</a></li><li><a href="https://mailprogramming.com/" rel="external nofollow noopener noreferrer" target="_blank">매일 프로그래밍</a></li><li><a href="https://github.com/devJang/developer-roadmap?fbclid=IwAR3caSuOSA71kwoisWbsVLykQglLW03l9dHvSCkk4cIdTIUvMF0F4xB1onY" rel="external nofollow noopener noreferrer" target="_blank">웹개발자 로드맵</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프론트엔드? 백엔드? 그게 뭐죠??&lt;br&gt;나는 어디가 어울릴까?&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git을 vscode를 통해 간편하게 사용해보자!</title>
    <link href="https://caesiumy.github.io/2019/04/07/vscode-how-to-git/"/>
    <id>https://caesiumy.github.io/2019/04/07/vscode-how-to-git/</id>
    <published>2019-04-07T07:39:49.000Z</published>
    <updated>2019-04-07T10:19:53.698Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><div class="figure " style="width:;"><img class="fig-img" src="git6.jpeg" alt="(codeburst.io/git-and-github-in-a-nutshell-b0a3cc06458f)"><span class="caption">(codeburst.io/git-and-github-in-a-nutshell-b0a3cc06458f)</span></div><h1 id="git이란-무엇인가"><a href="#git이란-무엇인가" class="headerlink" title="git이란 무엇인가"></a>git이란 무엇인가</h1><p>아마 개발자들이라고 하면 <code>git</code> 에 대해 모르는 사람이 없을 것이지만,<br>입문자들은 금시초문인 것이 당연하다.</p><p>그런데 이 <code>git</code>을 관리해주는 <a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 가 마이크로소프트에 한화 약 <strong>8조원</strong>에 인수되었다고 한다면, <code>git</code>이 개발자들에게 있어서 어떤 의미인지 빠르게 짐작할 수 있을 것이라고 생각한다.</p><blockquote><p>넥슨의 예상 매각 가격이 약 10~13조원이라고 하는데, 겨우 인터넷 서비스가 8조원…??</p></blockquote><p>이러한 <code>git</code>은 이곳에 포스팅하기에도 벅찬, <strong>매우 많은 기능을 제공</strong>해준다. <del>페르마의 마지막 정리</del><br>버전 관리, 백업, 정적 페이지 호스팅 등등…<br>실제로 많은 IT회사에서도 <strong>서류에 자신의 <code>github</code> 주소를 담으라고</strong> 하기도 한다.<br>이렇듯이 앞으로 개발 업계에 몸을 담으려면 <strong>빼놓을 수 없는 서비스</strong>일 것이다.</p><h1 id="그래서-어떻게-쓰죠"><a href="#그래서-어떻게-쓰죠" class="headerlink" title="그래서 어떻게 쓰죠??"></a>그래서 어떻게 쓰죠??</h1><div class="figure " style="width:;"><img class="fig-img" src="git3.png" alt="(dev.to/neshaz/git-commands-ultimate-tutorial-part-2-7ko)"><span class="caption">(dev.to/neshaz/git-commands-ultimate-tutorial-part-2-7ko)</span></div><p><code>git</code> 을 쓰는 방법은 여러가지가 있다.</p><ul><li>위의 사진처럼 CLI에 명령어를 입력해서 해도 되고,</li><li><code>git desktop</code> 같은 유틸을 사용해도 되고,</li><li>앞으로 설명하려는 <code>vscode</code> 같은 에디터에 탑재된 기능을 사용해도 된다.</li></ul><blockquote><p>CLI란 <code>Command Line Interface</code>의 약자로, 보통 해커하면 생각나는 검은 화면에 하얀 글씨를 떠올리면 편하다.</p></blockquote><p><strong>CLI로 <code>git</code>을 사용하는 방법은 <a href="https://gmlwjd9405.github.io/2017/10/27/how-to-collaborate-on-GitHub-1.html" rel="external nofollow noopener noreferrer" target="_blank">여기</a>에서 참고해보자!</strong> 필자도 여기에서 기본적인 명령어들을 익혔다.</p><blockquote><p><code>git</code>을 사용하려면 <a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a>아이디가 필요하다. 어서 가서 가입하자!</p></blockquote><h1 id="vscode를-통해-git-사용해보기"><a href="#vscode를-통해-git-사용해보기" class="headerlink" title="vscode를 통해 git 사용해보기"></a>vscode를 통해 git 사용해보기</h1><hr><h2 id="소스-제어자를-설정하자"><a href="#소스-제어자를-설정하자" class="headerlink" title="소스 제어자를 설정하자"></a>소스 제어자를 설정하자</h2><div class="figure center" style="width:;"><a class="fancybox" href="vscode_git1.png" title="필자의 블로그가 보이는 탐색기이다." data-caption="필자의 블로그가 보이는 탐색기이다." data-fancybox="default"><img class="fig-img" src="vscode_git1.png" alt="필자의 블로그가 보이는 탐색기이다."></a><span class="caption">필자의 블로그가 보이는 탐색기이다.</span></div><p>탐색기는 제쳐두고, 왼쪽에 메뉴바에 주목해주시길 바란다.<br>위에서 3번째가 바로 <code>git</code>을 관리해주는, <strong>소스 제어</strong>라는 항목이다.<br>한 번 들어가보자.</p><div class="figure center" style="width:;"><a class="fancybox" href="vscode_git2.png" title="아무것도 안 하면 이렇게 뜬다." data-caption="아무것도 안 하면 이렇게 뜬다." data-fancybox="default"><img class="fig-img" src="vscode_git2.png" alt="아무것도 안 하면 이렇게 뜬다."></a><span class="caption">아무것도 안 하면 이렇게 뜬다.</span></div><p>정말 아무것도 세팅하지 않았을 시에 이렇게 뜰 것이다.<br>자 이게 <strong>소스 제어자를 <code>git</code></strong>으로 바꾸어줄 시간이다.</p><div class="figure center" style="width:;"><a class="fancybox" href="vscode_git3.png" title="지웠으니 괜찮겠지??" data-caption="지웠으니 괜찮겠지??" data-fancybox="default"><img class="fig-img" src="vscode_git3.png" alt="지웠으니 괜찮겠지??"></a><span class="caption">지웠으니 괜찮겠지??</span></div><p><code>ctrl</code> + <code>shift</code> + ` 를 함께 누르거나, 위 메뉴에서 터미널을 선택해 <strong>새 터미널</strong>을 눌러보자. 사진과 같은 터미널이 뜰 것이다.</p><p>이곳에서 <code>cd</code> 명령어를 통해 원하는 디렉토리에 들어가면 되지만,<br>어차피 대부분 작업환경에서 <code>vscode</code>를 실행하였을 것이기 때문에 <strong>그냥 바로 시작해도 된다.</strong></p><p>그럼 바로 시작해보자<br><strong><code>git init</code>을 터미널에 입력하고 엔터를 쳐보자.</strong></p><blockquote><p>시작할 때는 <code>git init</code>을 입력하자.<br>init은 initialize, ‘시작하다, 초기 내용을 설정하다’라는 의미이다.</p></blockquote><div class="figure center" style="width:;"><a class="fancybox" href="vscode_git4.png" title="이번엔 모자이크" data-caption="이번엔 모자이크" data-fancybox="default"><img class="fig-img" src="vscode_git4.png" alt="이번엔 모자이크"></a><span class="caption">이번엔 모자이크</span></div><p>그럼 <strong>소스 제어: GIT</strong> 이라는 표시와 함께,<br><strong>변동이 있는 파일들</strong>이 주르륵 나타날 것이다.</p><hr><h2 id="git과-github를-연동해주자"><a href="#git과-github를-연동해주자" class="headerlink" title="git과 github를 연동해주자"></a>git과 github를 연동해주자</h2><h3 id="계정-연동"><a href="#계정-연동" class="headerlink" title="계정 연동"></a>계정 연동</h3><p>여기서 또 커맨드로 해주어야 할 것이 있다.<br>바로 <strong>git과 github를 연동</strong>해주는 것! 그래야 github에서 나를 인식하기 때문이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &apos;유저 이름&apos;</span><br><span class="line">git config --global user.email &apos;유저 이메일&apos;</span><br></pre></td></tr></table></figure><p>github 가입시 적어냈던 유저 이름과 이메일을 적어주면 된다.</p><blockquote><p><code>git init</code> 과 달리 한 번만 적어주면 된다.</p></blockquote><h3 id="레포지토리-연동"><a href="#레포지토리-연동" class="headerlink" title="레포지토리 연동"></a>레포지토리 연동</h3><div class="figure center" style="width:;"><a class="fancybox" href="github2.png" title="뭐가 많지만 일단 아래를 따라하자" data-caption="뭐가 많지만 일단 아래를 따라하자" data-fancybox="default"><img class="fig-img" src="github2.png" alt="뭐가 많지만 일단 아래를 따라하자"></a><span class="caption">뭐가 많지만 일단 아래를 따라하자</span></div><p>방금 만들어진 레포지토리로 들어가면, 사진처럼 바로 위에 <code>https://github.com/유저 이름/레포지토리 이름.git</code> 형식으로 된 링크가 뜰 것이다. <strong>얼른 복사하자.</strong></p><p>참고로 위 사진의 명령어들은 <code>cli</code>를 사용할 때 쓰는 것들이다.<br>우리는 <code>vscode</code>를 이용할 것이므로 패스.</p><p>그럼 터미널에</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &apos;복사한 레포지토리 주소 붙여넣기&apos;</span><br></pre></td></tr></table></figure><p>를 입력하여 현재 작업 영역과 레포지토리를 연동해주자.</p><blockquote><p>입력한 주소를 확인 하는 명령어는 <code>git remote -v</code><br>잘못 입력했을 경우에는 <code>git remote remove origin</code>으로 삭제하고 다시 설정해주자</p></blockquote><h4 id="전-저런-창이-안-떠요"><a href="#전-저런-창이-안-떠요" class="headerlink" title="전 저런 창이 안 떠요"></a>전 저런 창이 안 떠요</h4><div class="figure center" style="width:;"><a class="fancybox" href="github1.png" title="오픈 소스니깐 공개!" data-caption="오픈 소스니깐 공개!" data-fancybox="default"><img class="fig-img" src="github1.png" alt="오픈 소스니깐 공개!"></a><span class="caption">오픈 소스니깐 공개!</span></div><p>아마 레포지토리 생성 시 Readme.md 생성을 체크해서 그랬을 것이다.<br><strong>걱정할 필요 없다.</strong></p><p>일단 그렇게 레포지토리를 만들었으면, 위와 같은 모습일 것이다.<br>사진처럼 <em>clone or download</em> 를 클릭해서 <strong>나오는 링크를 복사</strong>하자. 레포지토리의 <code>git</code> 링크이다.</p><p>아까 터미널로 돌아와서,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &apos;복사한 레포지토리 주소&apos;</span><br></pre></td></tr></table></figure><p>를 입력하면 레포지토리 이름으로 된 폴더가 생길 것이다.<br>그곳에서 작업하면 된다.</p><p><strong>이렇게 작업할 시에는 위의 <code>git init</code> 부분은 생락해도 된다.</strong><br>왜냐하면 <code>clone</code>할 시 <code>init</code>도 같이 해주기 때문.<br><del>그래서 필자는 이 방법을 주로 쓴다</del></p><blockquote><p>만약 vscode 터미널이 아닌 git bash로 했다면 붙여넣기 명령어는 <code>shift</code> + <code>insert</code></p></blockquote><p>자 이제 터미널로 할 일은 끝났다. <strong>어려운 일은 이제 끝</strong>이라고 생각하면 된다!!</p><hr><h2 id="git-add와-commit"><a href="#git-add와-commit" class="headerlink" title="git add와 commit"></a>git add와 commit</h2><div class="figure center" style="width:;"><a class="fancybox" href="vscode_git4.png" title="35는 변동된 파일의 숫자" data-caption="35는 변동된 파일의 숫자" data-fancybox="default"><img class="fig-img" src="vscode_git4.png" alt="35는 변동된 파일의 숫자"></a><span class="caption">35는 변동된 파일의 숫자</span></div><p>이 사진을 다시 보자.<br><strong>메시지 (커밋하려면 Ctrl + Enter 누르기)</strong> 가 보일 것이다.</p><p>이곳에 github에 올리는 <strong>메시지</strong>를 적고, (test, docs, fix 등 간단 설명)<br>우측 상단에 <strong>체크</strong> 표시를 누르고 확인을 하면 <strong>add와 commit 모두 동시</strong>에 되는 것이다!!</p><p>소스 제어 탭의 다른 기능은 다음과 같다.</p><ul><li>변경 내용을 클릭시 어떻게 바뀌었는지 <strong>변동 내역 확인 가능</strong></li><li>되돌리기를 통해 변동 <strong>이전으로 되돌리기 가능</strong></li><li><strong>원하는 파일만</strong> 스테이징(add) 가능</li><li>모든 파일 스테이징 가능</li><li>기타 등등</li></ul><hr><h2 id="git-push를-통해-github에-올려보자"><a href="#git-push를-통해-github에-올려보자" class="headerlink" title="git push를 통해 github에 올려보자"></a>git push를 통해 github에 올려보자</h2><div class="figure center" style="width:;"><a class="fancybox" href="vscode_git5.png" title="master옆의 아이콘은 다를 수도 있다." data-caption="master옆의 아이콘은 다를 수도 있다." data-fancybox="default"><img class="fig-img" src="vscode_git5.png" alt="master옆의 아이콘은 다를 수도 있다."></a><span class="caption">master옆의 아이콘은 다를 수도 있다.</span></div><p>자 이제 마지막 스텝만 남았다.<br><code>vscode</code> 좌측 하단을 보면 다음과 같은 바가 보일 것이다.</p><p>master는 현재 master 브랜치에 있다는 뜻이고,(관리자라고 생각하면 편하다.)<br>그 <strong>옆에 있는 아이콘을 클릭</strong>하면 된다.</p><p>척 봐도 <strong>동기화</strong>라고 쓰여있는 듯한 아이콘일 수도 있고,<br>처음이면 <strong>클라우드에 업로드하는 모양</strong>일 수도 있다.</p><p>위 사진은 4개 변동사항을 <strong>내려받고</strong>, 26개의 변동사항을 <strong>올려야 한다</strong>는 뜻이다.<br>내려받을 변동사항이 있으면 <strong>바로바로 받자</strong>. 안 받고 하면 <strong>충돌</strong>이 일어날 수도…</p><h1 id="이미-만들어진-레포지토리를-가져오고-싶어요"><a href="#이미-만들어진-레포지토리를-가져오고-싶어요" class="headerlink" title="이미 만들어진 레포지토리를 가져오고 싶어요."></a>이미 만들어진 레포지토리를 가져오고 싶어요.</h1><p>다른 로컬 환경에서(다른 컴퓨터나) <code>git</code>을 이어서 하고 싶을 때!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &apos;레포지토리 주소`</span><br></pre></td></tr></table></figure><p>를 명령어로 입력해보자. 뭔가 주르륵 뜨면서 <strong>자동으로 다운로드</strong> 될 것이다.</p><p>이 명령어로 다운받았을 시, <strong>위의 레포지토리 연동 부분은 건너뛰어도 된다!</strong> 와 세상 편안!<br><del>그러니 오류 났을 시 그냥 clone으로 처음부터 다시 처리하자</del></p><hr><p>일단 생각나는대로 git에 대한 간단 사용법을 적어보았다. 부족한 부분이 있으면 피드백을!!</p><h3 id="같이보면-좋은-포스트"><a href="#같이보면-좋은-포스트" class="headerlink" title="같이보면 좋은 포스트"></a>같이보면 좋은 포스트</h3><ul><li><a href="https://sujinlee.me/professional-github/" rel="external nofollow noopener noreferrer" target="_blank">깃허브로 취업하기</a></li><li><a href="https://gmlwjd9405.github.io/2017/10/27/how-to-collaborate-on-GitHub-1.html" rel="external nofollow noopener noreferrer" target="_blank">깃허브로 협업하기</a></li><li><a href="https://drive.google.com/file/d/10zcqBw4Nzz5SshiZVmt8ST41mwN86kdh/view" rel="external nofollow noopener noreferrer" target="_blank">멋사 성균관대 박성우 분께서 제작하신 git 가이드라인</a></li><li><a href="https://opentutorials.org/course/2708" rel="external nofollow noopener noreferrer" target="_blank">생활코딩 지옥에서 온 Git(구)</a></li><li><a href="https://opentutorials.org/module/3967" rel="external nofollow noopener noreferrer" target="_blank">생활코딩 Git4 cli로 협업</a></li><li><a href="https://opentutorials.org/module/3991" rel="external nofollow noopener noreferrer" target="_blank">생활코딩 Git 소스트리 협업</a></li></ul><p><del>포스트 쓰려니 너무 많아져서 생략…</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;입문자가 git을 CLI로 사용하는 것은 어렵다. 명령어니 뭐니…&lt;br&gt;그러니 vscode를 통해 쉽고 간편하게 익혀보자!&lt;/p&gt;
    
    </summary>
    
      <category term="멋쟁이 사자처럼" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/"/>
    
      <category term="개발환경" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="git" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/git/"/>
    
    
      <category term="멋쟁이 사자처럼" scheme="https://caesiumy.github.io/tags/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/"/>
    
      <category term="개발환경" scheme="https://caesiumy.github.io/tags/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="vscode" scheme="https://caesiumy.github.io/tags/vscode/"/>
    
      <category term="git" scheme="https://caesiumy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vscode 추천 익스텐션(Extensions)과 세팅</title>
    <link href="https://caesiumy.github.io/2019/04/02/vscode-recommended-extensions/"/>
    <id>https://caesiumy.github.io/2019/04/02/vscode-recommended-extensions/</id>
    <published>2019-04-02T14:46:33.000Z</published>
    <updated>2019-04-05T15:45:14.509Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>우리는 앞서 올린 게시글에서 개발환경을 설정하는 법을 배웠지만 그 개발 환경을 바로 쓰기에는 아직 이르다.<br>개발자는 게을러지기 위해 부지런해지는 법. 어서 쉽고 편한 확장 프로그램을 설치하러 떠나보자!!</p><blockquote><p>필자가 설치한 A-Z 순서대로 서술할 것이다.</p></blockquote><h1 id="Auto-closing-tag"><a href="#Auto-closing-tag" class="headerlink" title="Auto closing tag"></a>Auto closing tag</h1><div class="figure center" style="width:;"><img class="fig-img" src="1.png" alt="auto closing tag"><span class="caption">auto closing tag</span></div><p>오토 클로징 태그라고, 태그를 입력시 자동으로 닫는 태그를 생성해준다.</p><p>나중에 <code>emmet</code> 에 익숙해지면 잘 안 쓰이겠지만, 그래도 없으면 불편함이 체감되는 확장 프로그램.</p><blockquote><p><code>alt</code> + <code>.</code> 을 함께 입력해보자.<br>닫는 태그가 빠진 곳을 수동으로 채워주는 단축키이다.</p></blockquote><h1 id="Auto-Rename-tag"><a href="#Auto-Rename-tag" class="headerlink" title="Auto Rename tag"></a>Auto Rename tag</h1><div class="figure center" style="width:;"><img class="fig-img" src="2.png" alt="auto rename tag"><span class="caption">auto rename tag</span></div><p>위의 확장 프로그램과 비슷한 역할이지만, 더 좋다고(?) 할 수 있는 확장 프로그램이다.</p><p>원래 여는 태그의 이름을 바꾸면 닫는 태그의 이름도 함께 바꿔주어야 하는 수고로움이 수반되지만,<br>이 확장 프로그램과 함께라면 <strong>그런 건 없다.</strong><br>여는 태그의 이름이 바뀌면 닫는 태그의 이름도 함께 바꾸어준다. <em>어메이징!!</em></p><h1 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a>Bracket Pair Colorizer</h1><div class="figure center" style="width:;"><img class="fig-img" src="colorizer.png" alt="Bracket Pair Colorizer"><span class="caption">Bracket Pair Colorizer</span></div><p>((((())))) ???</p><p>수학에서 괄호가 엄청 많이 있어서 당황한 적이 있을 것이다. 도대체 어디서부터가 어디까지인지…</p><p>허나 이 익스텐션은 <strong>짝이 되는 괄호끼리 색을 칠해</strong>, 가독성을 높였다!<br><del>알록달록한 괄호들을 보는 맛도 있다 츄릅</del></p><h1 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a>Debugger for Chrome</h1><div class="figure center" style="width:;"><img class="fig-img" src="debugger_for_chrome.png" alt="Debugger for Chrome"><span class="caption">Debugger for Chrome</span></div><p>크롬 디버거를 <code>vscode</code>로 가져오는 익스텐션이다. 필자는 설치만 하고 사용할 일이 없었는데,<br>말하자면 길어지니, 필요하면 <a href="https://noooop.tistory.com/entry/VS-code%EC%97%90%EC%84%9C-Debugger-for-Chrome-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank">여기</a>에서 사용방법을 익혀보자.</p><h1 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h1><div class="figure center" style="width:;"><img class="fig-img" src="git_history.png" alt="Git History"><span class="caption">Git History</span></div><p>나중에 멋사에서 배우게 될 <code>git</code>을 좀 더 편하게 사용하게 해주는 익스텐션이다.<br>현재 작업환경에서 어떤 깃 활동을 했는지 자세히 보여주는 역할을 해준다.</p><blockquote><ol><li><code>ctrl</code> + <code>shift</code> + <code>p</code> 또는 <code>f1</code> 을 눌러 사용자 팔레트를 연다.</li><li><code>git log</code> 를 입력한다.</li><li><strong>Git: View History</strong> 항목을 선택한 뒤 엔터!</li></ol></blockquote><h1 id="Hightlight-Matching-Tag"><a href="#Hightlight-Matching-Tag" class="headerlink" title="Hightlight Matching Tag"></a>Hightlight Matching Tag</h1><div class="figure center" style="width:;"><img class="fig-img" src="highlight_matching_tag.png" alt="Highlight Matching Tag"><span class="caption">Highlight Matching Tag</span></div><p>앞서 설명한 괄호에 색 입혀서 구분하게 하는 기능을 태그로 비슷하게 가져왔다고 생각하면 된다.</p><p>자세히 말하자면, 현재 내가 <strong>선택한 태그의 여는 태그 혹은 닫는 태그가 어디있는지 표시(하이라이트)해주는 기능</strong>이라는 것이다.</p><blockquote><p>더 궁금하다면 언제나 그렇듯이 확장 프로그램 설명란을 참조할 것!!</p></blockquote><div class="figure center" style="width:;"><img class="fig-img" src="example.png" alt="확장 프로그램을 소개하는 이런 페이지 말이다."><span class="caption">확장 프로그램을 소개하는 이런 페이지 말이다.</span></div><h1 id="IntelliSense-for-CSS-SCSS-class-names-in-HTML-Slim-and-SCSS"><a href="#IntelliSense-for-CSS-SCSS-class-names-in-HTML-Slim-and-SCSS" class="headerlink" title="IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS"></a>IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS</h1><div class="figure center" style="width:;"><a class="fancybox" href="intellisense.png" title="IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS" data-caption="IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS" data-fancybox="default"><img class="fig-img" src="intellisense.png" alt="IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS"></a><span class="caption">IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS</span></div><p>html이 바늘이라면, css는 실!<br>그 실을 바늘에 자동으로 꿰어주는 없어서는 안 될 익스텐션이다.</p><p>간단하게 말하자면, css를 <strong>자동완성</strong>하도록 도와준다.</p><h3 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a>HTML CSS Support</h3><div class="figure center" style="width:;"><img class="fig-img" src="css_support.png" alt="HTML CSS Support"><span class="caption">HTML CSS Support</span></div><p>위에서 언급한 인텔리센스와 이 서포트는 그냥 같은 역할이다.<br>위 익스텐션이 먹통이면 이걸 사용하는 정도…??</p><blockquote><p>자동완성이 안 된다면 <code>ctrl</code> + <code>space</code>를 눌러보자.<br>어디서나 공통인 <strong>자동완성 단축키</strong>이다.</p></blockquote><h1 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h1><div class="figure center" style="width:;"><img class="fig-img" src="jinja.png" alt="Jinja"><span class="caption">Jinja</span></div><p><del>이 익스텐션은 ‘진짜’다…</del></p><p><code>django</code>로 개발하다보면, 필수적으로 <strong>템플릿 태그</strong>를 사용하게 된다.<br>그러나 이 템플릿 태그가 모두 같은 색이라면 구분하기 힘들 것이 안 봐도 비디오.</p><p>그렇다. 바로 그 템플릿 태그에 <strong>색을 씌워주는</strong> 확장 프로그램이다.</p><blockquote><p>없어도 될 거 같은데?? 하지 말고 일단 설치하자.</p></blockquote><h1 id="Korean-Language-Pack-for-Visual-Studio-Code"><a href="#Korean-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Korean Language Pack for Visual Studio Code"></a>Korean Language Pack for Visual Studio Code</h1><div class="figure center" style="width:;"><img class="fig-img" src="korean.png" alt="Korean Language Pack for Visual Studio Code"><span class="caption">Korean Language Pack for Visual Studio Code</span></div><p>한국인은 역시 한글을 써야한다.<br>영문과인 필자도 정말정말 애용하는 익스텐션.</p><p><code>vscode</code>의 대부분을 <strong>한글</strong>로 사용할 수 있게 해주는 언어팩.</p><h1 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h1><div class="figure center" style="width:;"><img class="fig-img" src="live_server.png" alt="Live Server"><span class="caption">Live Server</span></div><p>자신이 만들고 있는 <strong>페이지를 열어주고</strong>, 라이브로 갱신시켜 보여주는 익스텐션.</p><p><code>django</code> 개발 중에는 쓸 일이 드물겠지만, 그래도 <code>html</code> 과 <code>css</code> 만을 사용한 페이지를 만들 때는 유용하다.</p><h1 id="Live-Share"><a href="#Live-Share" class="headerlink" title="Live Share"></a>Live Share</h1><div class="figure center" style="width:;"><img class="fig-img" src="live_share.png" alt="Live Share"><span class="caption">Live Share</span></div><p>운영진들이 앞으로 쓸 일이 많아질 거 같은 익스텐션 1위…<br>물론 협업에 사용해도 매우 좋은 확장프로그램이다.</p><p><strong>실시간으로 코드를 공유</strong>하여 프로그래밍을 돕는 방식이기에 디버깅, 협업 어디에도 어울린다.<br>AWS에 있는 Cloud9이나, 국내 서비스인 구름IDE와 비슷하다고 생각하면 되겠다.</p><p>사용 방법도 간단하다. 왼쪽 메뉴에 생기는 Live Share 메뉴를 클릭하고, 서버를 만든 뒤, 서버 링크를 복사하여 팀원을 초대하면 끝!</p><h1 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a>Markdown All in One</h1><div class="figure center" style="width:;"><img class="fig-img" src="markdown.png" alt="Markdown All in One"><span class="caption">Markdown All in One</span></div><p><strong>마크다운 문법</strong>을 편하게 사용하도록 단축키를 추가해주는 확장 프로그램이다.</p><p>마크다운이 뭐냐구요…??<br>나중에 깃허브에 올릴 readme 또는 현재 필자가 쓰는 블로그 등에 쓰이는 문법.<br>어차피 언젠가는 익혀야하기 때문에 미리 설치해둡시다.</p><h1 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h1><div class="figure center" style="width:;"><img class="fig-img" src="material.png" alt="Material Theme"><span class="caption">Material Theme</span></div><p>기존의 <code>vscode</code> 테마를 탈피한 다른 테마를 설치할 수 있도록 하는 확장프로그램.<br>사용 방법은 위에 보이는 <strong>색 테마 설정 버튼</strong> 또는 사용자 팔레트를 열어서 <code>theme</code> 이라고 입력한 다음 테마를 바꾸어보자.</p><blockquote><p>사용자 팔레트는 <code>f1</code> 또는 <code>ctrl</code> + <code>shift</code> + <code>p</code> 로 연다.</p></blockquote><h1 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h1><div class="figure center" style="width:;"><img class="fig-img" src="path.png" alt="Path Intellisense"><span class="caption">Path Intellisense</span></div><p>모두들 언젠가 로컬에 있는 파일을 참조해야 할 경우가 생길 것이다.<br>바로 그때 <strong>로컬 파일을</strong> 빠르게, 정확하게 참조할 수 있도록 <strong>자동완성</strong>을 해주는 기능.</p><h3 id="npm-Instellisense"><a href="#npm-Instellisense" class="headerlink" title="npm Instellisense"></a>npm Instellisense</h3><div class="figure center" style="width:;"><img class="fig-img" src="npm.png" alt="npm Intellisense"><span class="caption">npm Intellisense</span></div><p>자매품이다. 위 확장 프로그램과 <strong>함께</strong> 설치하자.</p><h1 id="Power-Mode"><a href="#Power-Mode" class="headerlink" title="Power Mode"></a>Power Mode</h1><div class="figure center" style="width:;"><img class="fig-img" src="power.png" alt="Power Mode"><span class="caption">Power Mode</span></div><p>아는 사람만 알고, 쓰는 사람만 쓴다는 <strong>바로 그 모드.</strong><br>코딩하는 손 맛이 생긴다고 하는데, 필자는 안 쓰는 쪽이다.</p><p>백문이 불여일견이다.<br><strong>확장 프로그램 상세페이지를 통해 예시를 보고, 그 예사롭지 않음에 놀라보자.</strong></p><h1 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h1><div class="figure center" style="width:;"><img class="fig-img" src="prettier2.png" alt="Prettier"><span class="caption">Prettier</span></div><p>쓰는 이 모두가 감탄을 금치 못하는 <strong>바로 그 모드2.</strong><br>뒤죽박죽이던 코드를 치우는 모습은 그야말로 도라에몽이 에디터 안으로 강림한 듯한 편안함.</p><p>이것도 쓰는 사람만 쓰고, 안 쓰는 사람은 안 쓴다고 한다. 필자는 쓰는 쪽.</p><p><code>django</code> 에 쓰이는 템플릿 태그에서 가끔 오류가 생기곤 하는데,<br>그럴 땐 <code>vscode</code> 를 <strong>잠시 껏다가 켜보자.</strong></p><blockquote><p>뭐든지 오류가 생기면 껏다 켜거나, 새로 시작해보자.</p></blockquote><p>사용방법은 <strong>사용자 팔레트</strong>를 연 뒤, <code>Format Document</code>를 찾아 선택하면 완료!</p><p>헌데… 이 방법은 조금 번거롭다.<br>그래서 준비했다! <strong>매 저장(<code>ctrl</code> + <code>s</code>)시마다 바로바로 코드가 정리</strong>될 수 있도록 말이다.</p><div class="alert info no-icon"><ol><li><code>prettier</code> 를 설치한다</li><li><code>vscode</code> 설정에 들어간다.</li><li><strong>사용자 설정은 모든 곳에 적용되는 곳</strong>이고, 작업 영역 설정은 <strong>지금 바로 이 작업 환경(디렉토리)에서만 적용</strong>되는 설정이다. 취향껏 고르자.</li><li><p>검색창에 <code>format on save</code> 를 입력해보자. 저장할 때마다 서식을 지정한다는 뜻이다.</p><div class="figure center" style="width:;"><img class="fig-img" src="on_save.png" alt></div></li><li><p>위 그림과 같이 체크한다.</p></li><li>잘 되었나 확인해보고 싶으면 뒤죽박죽인 자신의 코드에서 <code>ctrl</code> + <code>s</code>로 <strong>저장</strong>해보자.</li><li>아니면 설정 검색창에서 <code>setting.json</code> 를 검색하고, 편집 버튼을 눌러 살펴보자.</li></ol></div><blockquote><p><code>settings.json</code>에서 <code>editor.formatOnSave</code>가 <code>true</code> 값인지 확인해봐도 된다.</p></blockquote><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><div class="figure center" style="width:;"><img class="fig-img" src="python.png" alt="Python"><span class="caption">Python</span></div><p><code>django</code>의 기반이 되는 언어는 <code>python</code> 이다.<br>묻지도 따지지도 말고 <strong>그냥 설치하자.</strong></p><h1 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h1><div class="figure center" style="width:;"><img class="fig-img" src="sync.png" alt="Setting Sync"><span class="caption">Setting Sync</span></div><blockquote><p>이렇게 많은 확장 프로그램을 데스크탑에 설치해놓았는데,<br>아니! 노트북에도 일일히 해야 한다구!?</p></blockquote><p>라는 걱정을 덜어주는 확장 프로그램.</p><p>깃허브의 <code>gist</code>를 활용하여, <strong>현재 에디터 설정을 업로드 / 다운로드</strong>를 가능케 하는 신비로운 물건.</p><p>대신 초기 설정이 너무 복잡하기 때문에 이곳에서 설명하는 것은 불가능하고,<br><strong>확장 프로그램의 ‘세부 정보’ 에 가면 친절히 잘 설명되어 있으니 그곳을 참조하자.</strong></p><h1 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode icons"></a>vscode icons</h1><div class="figure center" style="width:;"><img class="fig-img" src="vscode_icon.png" alt="vscode icons"><span class="caption">vscode icons</span></div><p>왼쪽 메뉴바를 보시라. 너무 단조로워서 파일 찾기가 힘들지는 않은가??<br>그런 당신을 위한 확장 프로그램!! <code>vscode icon</code> !!</p><p>이름처럼 <code>vscode</code>의 단조로운 <strong>파일 아이콘을 보기 쉽게 바꾸어주는</strong> 확장 프로그램이다.</p><p><del>예시는 세부정보를 보시고</del></p><p><strong>사용 방법</strong>은 이미지에 나온 것처럼 <code>파일 아이콘 테마 설정</code><br>또는 사용자 팔레트를 통해 <code>vscode icons</code>를 검색하여 활성화하면 된다.</p><h1 id="vscode-styled-components"><a href="#vscode-styled-components" class="headerlink" title="vscode-styled-components"></a>vscode-styled-components</h1><div class="figure center" style="width:;"><img class="fig-img" src="components.png" alt="vscode-styled-components"><span class="caption">vscode-styled-components</span></div><p>이것도 맨 위에서 설명했던 코드 강조와 비슷하다.<br>그저 스타일이라는 말이 붙었기에, <strong>스타일을 표현하는 코드들에 색을 입혀주는</strong> 확장 프로그램.</p><h2 id="기타-팁"><a href="#기타-팁" class="headerlink" title="기타 팁"></a>기타 팁</h2><ul><li><code>settings.json</code>에서 <strong>빨간색의 밑줄</strong>이 그어진다면, 윗줄 마지막에 콤마 <code>,</code> 를 제대로 넣어뒀는지 확인해보자.</li><li>설정에 들어가서 <code>mouse wheel zoom</code> 을 검색하고 나온 결과에 체크해보자. <code>ctrl</code> + <code>마우스 휠</code> 로 <strong>에디터의 글자 크기를 조절</strong>할 수가 있다.</li></ul><h3 id="나머지-쓰면-좋은-익스텐션"><a href="#나머지-쓰면-좋은-익스텐션" class="headerlink" title="나머지 쓰면 좋은 익스텐션"></a>나머지 쓰면 좋은 익스텐션</h3><ul><li>Color Highlight</li><li>Comment Anchors</li><li>GitLens</li><li>TODO Highlight</li><li>django</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vscode 확장 프로그램들을 설치하고 세팅하여, 활용을 극대화해보자!&lt;/p&gt;
    
    </summary>
    
      <category term="멋쟁이 사자처럼" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/"/>
    
      <category term="개발환경" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="vscode" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/vscode/"/>
    
    
      <category term="멋쟁이 사자처럼" scheme="https://caesiumy.github.io/tags/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/"/>
    
      <category term="개발환경" scheme="https://caesiumy.github.io/tags/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="vscode" scheme="https://caesiumy.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>윈도우에서 django 개발환경 설치하기(vscode, git, python)</title>
    <link href="https://caesiumy.github.io/2019/03/31/settings-before-start/"/>
    <id>https://caesiumy.github.io/2019/03/31/settings-before-start/</id>
    <published>2019-03-31T08:45:31.000Z</published>
    <updated>2019-04-07T08:18:12.056Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>멋쟁이 사자처럼 7기 커리큘럼이 <code>django</code><del>(어무해)</del>로 바뀜과 동시에, 다루는 <code>IDE</code> 등 개발 환경 또한 바뀌게 되었다.</p><p>이번에 설치할 목록은 다음과 같다.</p><div class="alert info no-icon"><ol><li>Visual Studio Code</li><li>git</li><li>python</li><li>django</li></ol></div><p><br></p><h1 id="vscode-설치하기"><a href="#vscode-설치하기" class="headerlink" title="vscode 설치하기"></a>vscode 설치하기</h1><div class="figure center" style="width:;"><img class="fig-img" src="vscode3.png" alt="vscode 로고"><span class="caption">vscode 로고</span></div><p><strong><a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">vscode 설치 링크</a></strong> 에 들어가서 윈도우OS 전용으로 다운 받은 뒤, 파일을 실행하면 빠른 설치가 가능하다.<br>언제나 많은 분들이 그러하듯이 계속 다음 다음만 쭈욱 눌러주면 된다.</p><p>…면 좋겠으나, 막 누르지는 말고 아래 사진이 나오면 <strong>스탑!!</strong></p><p><br></p><div class="figure center" style="width:;"><a class="fancybox" href="vscode_install.png" title="체크 버튼이 나오는 항목까지만 진행하자" data-caption="체크 버튼이 나오는 항목까지만 진행하자" data-fancybox="default"><img class="fig-img" src="vscode_install.png" alt="체크 버튼이 나오는 항목까지만 진행하자"></a><span class="caption">체크 버튼이 나오는 항목까지만 진행하자</span></div><p>바탕 화면 바로가기는 취향껏 체크해주고, 나머지는 모두 <strong>체크</strong>해주자. 그래야 마우스 컨텍스트 메뉴에서 빠르게 <code>vscode</code> 를 실행할 수 있다.</p><blockquote><p><a href="https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%8D%EC%8A%A4%ED%8A%B8_%EB%A9%94%EB%89%B4" rel="external nofollow noopener noreferrer" target="_blank">마우스 컨텍스트 메뉴</a>란 마우스 우클릭 시 나오는 여러 메뉴들을 가리킴.</p></blockquote><p>그 이후는 설치 버튼을 누르고 기다리기만 하면 <strong><em>미션 1 컴플리트!</em></strong></p><h1 id="Git-설치하기"><a href="#Git-설치하기" class="headerlink" title="Git 설치하기"></a>Git 설치하기</h1><div class="figure center" style="width:;"><img class="fig-img" src="git1.png" alt="git 로고"><span class="caption">git 로고</span></div><p><strong><a href="https://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">git 설치 링크</a></strong> 로 들어가서, 우측에 있는 최신 버전 다운로드를 누르면 자동으로 설치파일이 다운로드된다.</p><p><code>vscode</code> 와 똑같이, 계속 다음만 눌러주다가 아래 이미지에서 <strong>잠깐!!</strong></p><p><br></p><div class="figure center" style="width:;"><a class="fancybox" href="git2.png" title="여기만 바꿔주면 만사 오케이" data-caption="여기만 바꿔주면 만사 오케이" data-fancybox="default"><img class="fig-img" src="git2.png" alt="여기만 바꿔주면 만사 오케이"></a><span class="caption">여기만 바꿔주면 만사 오케이</span></div><p>기존에는 <code>vim</code>으로 되어있을 것이지만, 우리는 앞으로 <code>vscode</code>를 사용할 것이기 때문에 그에 맞는 선택지를 골라주면 된다.</p><p>이 다음은 예상하시겠지만 쭉 다음만 눌러주면 설치가 완료된다.</p><h3 id="컨텍스트-메뉴-확인하기"><a href="#컨텍스트-메뉴-확인하기" class="headerlink" title="컨텍스트 메뉴 확인하기"></a>컨텍스트 메뉴 확인하기</h3><div class="figure center" style="width:;"><a class="fancybox" href="context_menu.png" title="이런 메뉴창이 나온다면 성공" data-caption="이런 메뉴창이 나온다면 성공" data-fancybox="default"><img class="fig-img" src="context_menu.png" alt="이런 메뉴창이 나온다면 성공"></a><span class="caption">이런 메뉴창이 나온다면 성공</span></div><div class="alert info no-icon"><ul><li>Git GUI Here</li><li>Git Bash Here</li><li>Open with Code</li></ul></div><p>바탕화면이나 어디 다른 디렉토리 내에서 마우스 우클릭을 해보자. 위 사진처럼 3가지 컨텍스트 메뉴가 뜨면 <code>vscode</code> 및 <code>git</code> 설치 성공이다. <del>라데온은 무시하자</del></p><p>실험 삼아 <code>git bash</code> 를 띄워 <code>git</code> 을 입력해보면 설치가 잘 된 것을 확인해볼 수 있을 것이다.</p><h1 id="파이썬-설치하기"><a href="#파이썬-설치하기" class="headerlink" title="파이썬 설치하기"></a>파이썬 설치하기</h1><div class="figure center" style="width:;"><img class="fig-img" src="python1.png" alt="파이썬 로고"><span class="caption">파이썬 로고</span></div><p>이전과 같이 <strong><a href="https://www.python.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">파이썬 설치 링크</a></strong> 로 들어가 가급적 최신 버전의 파이썬을 설치하자. 언제나 최신이 짱이다. <del>업데이트를 게을리하지 않는 개발자가 되자</del></p><p>우리 개발자들은 파이썬의 명성에 대해 익히 들어왔다. 커뮤니티가 크니, 못하는 게 없다느니… 그러므로 그런 자랑이야기는 스킵하고, 일단 써봐야 알 것 아닌가. 설치나 해보자.</p><p><br></p><div class="figure center" style="width:;"><a class="fancybox" href="python2.png" title="출처: liquidweb.com/kb/how-to-install-python-on-windows/" data-caption="출처: liquidweb.com/kb/how-to-install-python-on-windows/" data-fancybox="default"><img class="fig-img" src="python2.png" alt="출처: liquidweb.com/kb/how-to-install-python-on-windows/"></a><span class="caption">출처: liquidweb.com/kb/how-to-install-python-on-windows/</span></div><p>필자의 경우에는 이미 설치가 되어있어서… 다른 분 사진을 빌려왔다.</p><p>버전 상관 없이 처음 설치하시는 분들은 저런 창을 보게 될텐데,</p><p><strong><span class="highlight-text danger">아래 Add python to PATH 를 무조건 체크해야한다. </span></strong></p><p>이미 겪어본 경험을 바탕으로 말하자면, 저 부분에서 체크를 까먹은 분들이 꽤 많다.<br>덕분에 적지 않은 분들이 파이썬 설치 확인 커맨드 입력시 <code>Command not found</code> 같은 통보(?)를 접하게 되는 불상사가…</p><p>설치가 모두 완료 되었으면</p><figure class="codeblock codeblock--tabbed"><figcaption><span>파이썬 설치확인</span><ul class="tabs"><li class="tab active">bash</li></ul></figcaption><div class="tabs-content"><figure class="highlight bash" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></tbody></table></figure></div></figure><p><code>git bash</code>를 켜서 다음의 명령어를 친 뒤 엔터를 눌러보자.<br>현재 설치한 파이썬 버전이 나오면 올바르게 설치한 것이다.</p><blockquote><p>안 나온다면 <a href="https://wxmin.tistory.com/121" rel="external nofollow noopener noreferrer" target="_blank">여기</a> 에서 34를 자기 버전에 맞게 바꾸어주면 된다.(ex. 37) 복잡해보이니 그냥 처음부터 PATH에 체크하자…</p></blockquote><h1 id="django-설치하기"><a href="#django-설치하기" class="headerlink" title="django 설치하기"></a>django 설치하기</h1><div class="figure center" style="width:;"><img class="fig-img" src="django1.png" alt="django 로고"><span class="caption">django 로고</span></div><p>django를 설치하기 위해서는 먼저 해야할 일이 있다.</p><p>바로 <strong>가상환경</strong>을 켜는 것.<br>가상환경이 무엇인지는 다음에 시간이 나면 간단히 링크를 걸어줄 생각이다.<br>일단 따라해보자.</p><p>순서는 다음과 같다.</p><div class="alert info no-icon"><ol><li>개발할 작업 디렉토리를 생성한다. (새 폴더 만들기)</li><li>마우스 우클릭을 통해 git bash를 연다. or vscode를 열어 터미널을 사용한다.(후자는 추후 설명)</li><li><code>python -m venv 가상환경 이름</code> 을 입력하고 엔터!</li><li>가상환경이 켠다.</li><li>django를 설치한다.</li><li><strong>앞으로도 django 개발시 꼭 가상환경을 켜고 시작한다.</strong></li></ol></div><h3 id="가상환경을-만들고-실행해보자"><a href="#가상환경을-만들고-실행해보자" class="headerlink" title="가상환경을 만들고, 실행해보자"></a>가상환경을 만들고, 실행해보자</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv 가상환경 이름</span><br></pre></td></tr></table></figure><p>같은 경우는 순서대로 이러한 뜻을 가지고 있다.<br>python 명령을 내리겠다. / make 만들겠다. / virtual environment, 가상환경을 / 이름은 이렇게!</p><p>주로 하는 가상환경이름은 <code>venv</code> or <code>myvenv</code> 이다.<br>필자는 <code>myvenv</code> 를 애용하니, 이걸 예시로 하자면<br><code>python -m venv myvenv</code> 가 되겠다!!</p><p>자 가상환경을 만들었으니 이제 켜봐야하지 않겠는가.<br><code>source 가상환경이름/Scripts/activate</code> 명령어를 치면 된다.</p><p>필자의 가상환경은 <code>myvenv</code> 라고 했으니</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source myvenv/Scripts/activate</span><br></pre></td></tr></table></figure><p>명령어를 입력하면 되는 것이다.</p><blockquote><p><code>source</code> 는 <code>.</code> 으로 대체가 가능하다.<br>되도록 <strong>tab</strong> 키를 눌러 자동완성으로 해야 오타가 적을 것이다.<br>예시를 기준으로 m 치고 탭! s치고 탭! a치고 탭!</p></blockquote><p>가상환경을 끄는 방법은 위처럼 복잡하지 않게</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>만 입력하면 된다.<br>아니면 그냥 껏다 키면 자동으로 꺼진다. 하하.</p><h2 id="가상환경을-켰으니-django를-설치하자"><a href="#가상환경을-켰으니-django를-설치하자" class="headerlink" title="가상환경을 켰으니 django를 설치하자."></a>가상환경을 켰으니 django를 설치하자.</h2><p>가상환경을 켜면, 터미널에 <code>(가상환경이름)</code> 이렇게 뜰 것이다. 이러면 가상환경이 켜져 있는 것이다.</p><p>이제 여기에</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>만 입력하면 끝이다.</p><p><del>django가 이렇게 쉽습니다.</del></p><p>django 설치를 확인하고 싶으시다면, 가상환경을 켜신 다음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p>이렇게 쳐보시면 django 가 리스트에 있을 것이다. 없으면… 설치 안 된 거죠 뭐.</p><p>여기까지 따라오셨다면, 모든 개발환경 세팅이 완료된 것입니다! 와우!</p><blockquote><p>pip를 업그레이드 해라 이런 텍스트가 뜰 때가 있는데, 그럼 나와있는 명령어를 그대로 입력하셔서 업그레이드하시면 됩니다!</p></blockquote><h2 id="끝내기-전에…"><a href="#끝내기-전에…" class="headerlink" title="끝내기 전에…"></a>끝내기 전에…</h2><div class="alert danger no-icon"><p><strong>앞으로 개발하실 때 꼭!! 가상환경 키고 시작하셔야 합니다!!</strong></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;멋쟁이 사자처럼 7기&lt;br&gt;django 개발을 위한 vscod, git, python을 설치해보자!&lt;/p&gt;
    
    </summary>
    
      <category term="멋쟁이 사자처럼" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/"/>
    
      <category term="개발환경" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="vscode" scheme="https://caesiumy.github.io/categories/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/vscode/"/>
    
    
      <category term="멋쟁이 사자처럼" scheme="https://caesiumy.github.io/tags/%EB%A9%8B%EC%9F%81%EC%9D%B4-%EC%82%AC%EC%9E%90%EC%B2%98%EB%9F%BC/"/>
    
      <category term="개발환경" scheme="https://caesiumy.github.io/tags/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="vscode" scheme="https://caesiumy.github.io/tags/vscode/"/>
    
      <category term="python" scheme="https://caesiumy.github.io/tags/python/"/>
    
      <category term="git" scheme="https://caesiumy.github.io/tags/git/"/>
    
  </entry>
  
</feed>
